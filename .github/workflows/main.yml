# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the dev branch
on:
  # manual execution
  workflow_dispatch:
  # trigger workflow when this file is update. It will be updated with new version of app below
  push:
      paths: 
      - '.github/workflows/main.yml'
  #pull_request:
  #  branches: [ dev ]

env:
  DALYINSKI_VERSION: 0.13

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
    debian-build:
        # The type of runner that the job will run on
        runs-on: ubuntu-20.04
        
        # Save output from create release step to use in windows build job below
        outputs:
            output_url: ${{ steps.create_release.outputs.upload_url }}

        # Steps represent a sequence of tasks that will be executed as part of the job
        steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - uses: actions/checkout@v2
        
        # Runs a single command using the runners shell
        - name: Build deb package
          run: bash create_deb.sh ${{ env.DALYINSKI_VERSION }}
        
        - name: Create Release
          id: create_release
          uses: actions/create-release@v1
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
              tag_name: v${{ env.DALYINSKI_VERSION }}
              release_name: Release v${{ env.DALYINSKI_VERSION }}
              draft: false
              prerelease: false

        - name: Upload Release Asset
          id: upload-release-asset 
          uses: actions/upload-release-asset@v1
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
              upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
              asset_path: ./dalyinski-${{ env.DALYINSKI_VERSION }}.deb
              asset_name: dalyinski-${{ env.DALYINSKI_VERSION }}.deb
              # Types available here https://www.iana.org/assignments/media-types/media-types.xhtml
              asset_content_type: application/vnd.debian.binary-package


    windows-build:
        runs-on: windows-latest 
        needs: debian-build
        steps:
        - uses: actions/checkout@v2
        - name: Set up Python 3.8.5
          uses: actions/setup-python@v2
          with:
            python-version: 3.8.5
            
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install pyinstaller
            # if [ -f win-requirements.txt ]; then pip install -r win-requirements.txt; fi

        - name: Create exe file
          run: pyinstaller --onefile --noconsole --name dalyinski-${{ env.DALYINSKI_VERSION }}.exe ./dalyinski-server.py

        - name: Upload Release Asset
          id: upload-release-asset 
          uses: actions/upload-release-asset@v1
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
              upload_url: ${{ needs.debian-build.outputs.output_url }} # Get url from the output of previous job (debian build) above
              asset_path: ./dist/dalyinski-${{ env.DALYINSKI_VERSION }}.exe
              asset_name: dalyinski-${{ env.DALYINSKI_VERSION }}.exe
              asset_content_type: application/vnd.microsoft.portable-executable
 
